#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//Barbut

int zarAtma(void); //fonksiyon portatipi.

int main(void) 
{
  int oyunDurumu, oyuncuPuani, toplam;
  srand(time(NULL));
  toplam = zarAtma(); //Zarın ilk atılışı.
  switch(toplam)
  {
  case 7: case 11: //İlk atışta kazanma.
    oyunDurumu=1;
    break;
  
  case 2: case 3: case 12: //İlk atışta kaybetme.
    oyunDurumu=2;
    break;
  
  default : //Hatırlatma noktası.
    oyunDurumu=0;
    oyuncuPuani=toplam;
    printf("Oyuncunun kazanacağı zar: %d \n",oyuncuPuani);
    break;            
  }
  while(oyunDurumu==0)  //Zar atmaya devam et.
  {
    toplam=zarAtma();
    if(toplam==oyuncuPuani) //Kazanılacak zarı atma.
      oyunDurumu=1;
    else if(toplam==7)  //7 atma ile kaybetme.
      oyunDurumu=2;
  }
    if(oyunDurumu==1)
      printf(" Oyuncu Kazanır");
    else
      printf("Oyuncu Kaybeder");
return 0 ;
}

int zarAtma(void) //Fonksiyon tanımlama.
{
  int zar1, zar2, toplamZar;
  zar1=(1+rand()%6);
  zar2=(1+rand()%6);
  toplamZar = zar1 + zar2;
  printf("Oyuncu %d + %d = %d attı \n",zar1,zar2,toplamZar);
  return toplamZar;
}
-----------------------------------------------------------------
/* Oyuncu iki zarı aynı anda atar. Ġki zarında altı yüzü vardır. Bu 
yüzlerde 1,2,3,4,5 ve 6 adet nokta bulunur. Zarlar durduktan 
sonra her iki zarında üste gelen yüzleri toplanır. Eğer toplam ilk 
atıĢta 7 ya da 11 ise oyuncu kazanır. Eğer toplam ilk atıĢta 2,3 
ya da 12 gelirse (buna barbut denir) oyuncu kaybeder. Eğer ilk 
atıĢta toplam 4,5,6,8,9,10 ise bu toplam oyuncunun sayısı haline 
gelir.Kazanmak için oyuncu sayısını bulana kadar zarları atmaya 
devam eder.Zarları atmaya devam ederken kendi sayısı yerine 7 
atarsa kaybeder.
*/
-----------------------------------------------------------------
/*
srand ( time ( NULL ) );
Bu, bilgisayarın besleme değeri olarak otomatik bir biçimde kendi saatini okumasına sebep 
olur. time fonksiyonu, o andaki saati saniye biçiminde oluĢturur. Bu değer, unsigned bir 
tamsayıya dönüĢtürülür ve rasgele sayı üretiminde besleme olarak kullanılır. time fonksiyonu 
argüman olarak NULL kullanır. (time programcının o günkü zamanı temsil eden bir dizeyi 
(string) elde etmesini sağlar ; NULL bu özelliği, time fonksiyonuna yapılan belirli bir 
çağrıda ortadan kaldırır.) time fonksiyonunun prototipi <time.h> içindedir.
*/
--------------------------------------------------------------------
/*
Oyuncunun ilk atıĢta ve daha sonra gelen atıĢlarda iki zarı birden atması gerektiğine dikkat 
ediniz. zarAtma adında bir fonksiyon, zarların atıĢından gelen toplamı hesaplayıp, yazdırmak 
için tanımlanmıĢtır. zarAtma fonksiyonu bir kez tanımlanmıĢ ancak programda iki yerde 
çağrılmıĢtır. Ġlginç olan zarAtma fonksiyonunun argüman almamasıdır. Bu sebepten, 
fonksiyonun parametre listesinde void kullanılmıĢtır. zarAtma fonksiyonu iki zarın üstüne 
gelen sayıların toplamını döndürmektedir ve bu sebepten, fonksiyon baĢlığında geri dönüĢ tipi 
int olarak bildirilmiĢtir.
Program oldukça kapsamlıdır. Oyuncu ilk atıĢında kazanabilir ya da kaybedebilir ya da daha 
sonraki atıĢlarında kazanabilir ya da kaybedebilir. oyunDurumu değiĢkeni, bütün bunların 
kaydını tutmak için kullanılmıĢtır
Oyun ilk ya da daha sonraki atıĢlarda kazanıldığında, oyunDurumu değiĢkeni 1 yapılmıĢtır. 
Oyun ilk ya da daha sonraki atıĢlarda kaybedildiğinde, oyunDurumu değiĢkeni 2 yapılmıĢtır.
Aksi takdirde, oyunDurumu değiĢkeni 0 olarak gösterilmiĢtir ve program devam edecektir.
Ġlk atıĢtan sonra eğer oyun biterse, oyundurumu 0‘a eĢit olmadığı için while yapısı atlanır. 
Program if/else yapısını çalıĢtırır ve oyundurumu 1 ise ―Oyuncu kazanır‖ , oyunDurumu 2
ise ―Oyuncu kaybeder ― yazdırır.
Ġlk atıĢtan sonra oyun bitmezse toplam , oyuncuPuani içinde saklanır. oyunDurumu 0
olduğu için program while yapısıyla devam eder. while yapısı her çalıĢtığında zarAtma 
fonksiyonu çağrılarak yeni bir toplam oluĢturulur. Eğer toplam, oyuncuPuani ile eĢleĢirse 
oyunDurumu oyuncunun kazandığını belirtmek için 1 olur, while testi yanlıĢ olacağından
while yapısı atlanır, if/else yapısı ―Oyuncu kazanır‖ yazdırır ve programın çalıĢması sona 
erer. Eğer toplam 7‘ye eĢitse oyunDurumu oyuncunun kaybettiğini belirtmek için 2 olur, 
while testi yanlıĢ olacağından while yapısı atlanır, if/else yapısı ―Oyuncu kaybetder‖ 
yazdırır ve programın çalıĢması sona erer.
*/